{"version":3,"file":"index.module.js","sources":["../src/index.ts"],"sourcesContent":["import { Alpine } from '@leanadmin/alpine-typescript';\n\nconst AlpineI18n = {\n\tversion: '1.0.0',\n\n\t/**\n\t * setter for the current locale\n\t */\n\tset locale(name) {\n\t\t//this.checkLocale(name)\n\t\tthis.currentLocale = name;\n\t\twindow.dispatchEvent(this.localChange);\n\t\tthis.updateSubscribers();\n\t},\n\n\t/**\n\t * getter for the current locale\n\t */\n\tget locale() {\n\t\treturn this.currentLocale;\n\t},\n\n\tcurrentLocale: '',\n\n\t/**\n\t * translations data\n\t * the first keys are the locale codes.\n\t */\n\tmessages: <any>{},\n\n\t/**\n\t * components that use the magic helpers\n\t */\n\tsubscribers: [],\n\n\t/**\n\t * event that will be dispatched when the locale changes\n\t * useful for when using outside of alpine components\n\t * like changing \"dir\" inside the body\n\t */\n\tlocalChange: new Event('locale-change'),\n\n\tstart() {\n\t\t/**\n\t\t * magic helper $locale\n\t\t * 1) set the locale: $locale('code')\n\t\t * 2) get the locale $locale()\n\t\t **/\n\t\twindow.Alpine.addMagicProperty('locale', ($el: HTMLElement) => {\n\t\t\tthis.subscribe($el);\n\t\t\treturn (locale: string | undefined) => {\n\t\t\t\tif (!locale) return this.locale;\n\t\t\t\tthis.checkLocale(locale);\n\t\t\t\tthis.locale = locale;\n\t\t\t};\n\t\t});\n\n\t\t/**\n\t\t * magic helper $t\n\t\t * $t('key')\n\t\t * $t('key', {var: val})\n\t\t */\n\t\twindow.Alpine.addMagicProperty('t', ($el: HTMLElement) => {\n\t\t\tthis.subscribe($el);\n\t\t\treturn (name: string, vars?: { [name: string]: any }) => {\n\t\t\t\treturn this.t(name, vars);\n\t\t\t};\n\t\t});\n\t},\n\n\t/**\n\t * Set up i18n's default locale and data.\n\t * @param locale the default locale\n\t * @param messages the translation data\n\t */\n\tcreate(locale: string, messages: { [name: string]: any }) {\n\t\tthis.messages = messages;\n\t\tthis.checkLocale(locale);\n\t\tthis.locale = locale;\n\t},\n\n\t/**\n\t * Get the localized version of a string\n\t * @param name the name of the message\n\t * @param vars optional variables to be passed to the string\n\t * @returns string\n\t */\n\tt(name: string, vars?: {[name: string]: any}) {\n\t\tlet message: string = name\n\t\t\t.split('.')\n\t\t\t.reduce((o, i) => o[i], this.messages[this.locale]);\n\t\tfor (const key in vars) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(vars, key)) {\n\t\t\t\t//@ts-ignore\n\t\t\t\tconst val: string = vars[key];\n\t\t\t\tlet regexp = new RegExp('{s*(' + key + ')s*}', 'g');\n\t\t\t\tmessage = message.replaceAll(regexp, val);\n\t\t\t}\n\t\t}\n\t\treturn message;\n\t},\n\n\t/**\n\t * Check if a locale exists in the message list\n\t * If it don't throw an Error. Does nothing otherwise.\n\t * @param locale locale to check\n\t */\n\tcheckLocale(locale: string) {\n\t\tif (!Object.keys(this.messages).includes(locale)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Alpine I18n: The locale ${locale} does not exist.`,\n\t\t\t);\n\t\t}\n\t},\n\n\t/**\n\t * Save an element to update it when locale change\n\t * @param el The element that uses the magic helper\n\t */\n\tsubscribe(el: HTMLElement) {\n\t\tif (!this.subscribers.includes(<never>el)) {\n\t\t\tthis.subscribers.push(<never>el);\n\t\t}\n\t},\n\n\t/**\n\t * Update components that use the magic helpers\n\t * taken from Spruce\n\t */\n\tupdateSubscribers() {\n\t\tthis.subscribers.forEach((el: any) => {\n\t\t\tel.__x.updateElements(el);\n\t\t});\n\t},\n};\n\nconst alpine =\n\twindow.deferLoadingAlpine || ((callback: Function) => callback());\n\nwindow.AlpineI18n = AlpineI18n;\n\nwindow.deferLoadingAlpine = function (callback: Function) {\n\twindow.AlpineI18n.start();\n\talpine(callback);\n};\n\ndeclare global {\n\tinterface Window {\n\t\tAlpine: Alpine;\n\t\tAlpineI18n: typeof AlpineI18n;\n\t}\n}\n\nexport default AlpineI18n;\n"],"names":["AlpineI18n","version","locale","name","this","currentLocale","window","dispatchEvent","localChange","updateSubscribers","messages","subscribers","Event","start","Alpine","addMagicProperty","$el","_this","subscribe","checkLocale","vars","t","create","message","split","reduce","o","i","key","Object","prototype","hasOwnProperty","call","val","regexp","RegExp","replaceAll","keys","includes","Error","el","push","forEach","__x","updateElements","alpine","deferLoadingAlpine","callback"],"mappings":"AAEA,IAAMA,EAAa,CAClBC,QAAS,QAKTC,WAAWC,GAEVC,KAAKC,cAAgBF,EACrBG,OAAOC,cAAcH,KAAKI,aAC1BJ,KAAKK,qBAMNP,aACC,YAAYG,eAGbA,cAAe,GAMfK,SAAe,GAKfC,YAAa,GAObH,YAAa,IAAII,MAAM,iBAEvBC,4BAMCP,OAAOQ,OAAOC,iBAAiB,SAAU,SAACC,GAEzC,OADAC,EAAKC,UAAUF,YACPd,GACP,IAAKA,EAAQ,OAAOe,EAAKf,OACzBe,EAAKE,YAAYjB,GACjBe,EAAKf,OAASA,KAShBI,OAAOQ,OAAOC,iBAAiB,IAAK,SAACC,GAEpC,OADAC,EAAKC,UAAUF,YACPb,EAAciB,GACrB,OAAOH,EAAKI,EAAElB,EAAMiB,OAUvBE,gBAAOpB,EAAgBQ,GACtBN,KAAKM,SAAWA,EAChBN,KAAKe,YAAYjB,GACjBE,KAAKF,OAASA,GASfmB,WAAElB,EAAciB,GACf,IAAIG,EAAkBpB,EACpBqB,MAAM,KACNC,OAAO,SAACC,EAAGC,UAAMD,EAAEC,IAAIvB,KAAKM,SAASN,KAAKF,SAC5C,IAAK,IAAM0B,KAAOR,EACjB,GAAIS,OAAOC,UAAUC,eAAeC,KAAKZ,EAAMQ,GAAM,CAEpD,IAAMK,EAAcb,EAAKQ,GACrBM,EAAS,IAAIC,OAAO,OAASP,EAAM,OAAQ,KAC/CL,EAAUA,EAAQa,WAAWF,EAAQD,GAGvC,OAAOV,GAQRJ,qBAAYjB,GACX,IAAK2B,OAAOQ,KAAKjC,KAAKM,UAAU4B,SAASpC,GACxC,UAAUqC,iCACkBrC,uBAS9BgB,mBAAUsB,GACJpC,KAAKO,YAAY2B,SAAgBE,IACrCpC,KAAKO,YAAY8B,KAAYD,IAQ/B/B,6BACCL,KAAKO,YAAY+B,QAAQ,SAACF,GACzBA,EAAGG,IAAIC,eAAeJ,OAKnBK,EACLvC,OAAOwC,oBAAuB,SAACC,UAAuBA,KAEvDzC,OAAON,WAAaA,EAEpBM,OAAOwC,mBAAqB,SAAUC,GACrCzC,OAAON,WAAWa,QAClBgC,EAAOE"}